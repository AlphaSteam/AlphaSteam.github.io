"use strict";

var THREE = _interopRequireWildcard(require("three"));

var _statsModule = _interopRequireDefault(require("three/examples/jsm/libs/stats.module.js"));

var _datGuiModule = require("three/examples/jsm/libs/dat.gui.module.js");

var _OrbitControls = require("three/examples/jsm/controls/OrbitControls.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var stats = new _statsModule.default();
document.body.appendChild(stats.dom);
var lastTime = new Date().getTime();
var controls = new function () {
  this.test = 0.02;
}();
var DEMO = {
  ms_Renderer: null,
  ms_Camera: null,
  ms_Scene: null,
  ms_Controls: null,
  Initialize: function () {
    this.ms_Renderer = new THREE.WebGLRenderer({
      //alpha: false,
      antialias: true,
      depth: true,
      logarithmicDepthBuffer: false,
      powerPreference: "high-performance",
      precision: 'highp',
      premultipliedAlpha: true
    });
    this.ms_Renderer.setPixelRatio(window.devicePixelRatio);
    document.body.appendChild(this.ms_Renderer.domElement);
    this.ms_Scene = new THREE.Scene();
    this.ms_Scene.name = 'Viewer';
    this.ms_Camera = new THREE.PerspectiveCamera(55.0, window.innerWidth / window.innerHeight, 0.5, 300000);
    this.ms_Camera.position.set(450, 350, 450);
    this.ms_Camera.lookAt(0, 0, 0); // Initialize Orbit control

    this.ms_Controls = new _OrbitControls.OrbitControls(this.ms_Camera, this.ms_Renderer.domElement);
    this.ms_Controls.userPan = false;
    this.ms_Controls.userPanSpeed = 0.0;
    this.ms_Controls.minDistance = 0;
    this.ms_Controls.maxDistance = 2000.0;
    this.ms_Controls.minPolarAngle = 0;
    this.ms_Controls.maxPolarAngle = Math.PI * 0.495;
    var gsize = 512;
    var res = 1024;
    var gres = res / 2;
    var origx = -gsize / 2;
    var origz = -gsize / 2;
    var geometry = new THREE.PlaneGeometry(500, 200, 3200);
    var material = new THREE.MeshBasicMaterial({
      color: 0xff4f00,
      side: THREE.DoubleSide
    });
    var plane = new THREE.Mesh(geometry, material);
    this.ms_Scene.add(geometry);
    /* var material = new THREE.ShaderMaterial( {
         uniforms: {
    
            time: { value: 1.0 },
            resolution: { value: new THREE.Vector2() }
    
        },
    
        vertexShader: document.getElementById( 'vertexShader' ).textContent,
    
        fragmentShader: document.getElementById( 'fragmentShader' ).textContent
    
    } ); */

    var gui = new _datGuiModule.GUI();
    gui.add(controls, 'test', 0, 1);
  },
  Display: function () {
    this.ms_Renderer.render(this.ms_Scene, this.ms_Camera);
  },
  Update: function () {
    var currentTime = new Date().getTime();
    lastTime = currentTime;
    this.Display();
  },
  Resize: function (inWidth, inHeight) {
    this.ms_Camera.aspect = inWidth / inHeight;
    this.ms_Camera.updateProjectionMatrix();
    this.ms_Renderer.setSize(inWidth, inHeight);
    this.Display();
  }
};
DEMO.Initialize();
window.addEventListener('resize', function () {
  DEMO.Resize(window.innerWidth, window.innerHeight);
});
DEMO.Resize(window.innerWidth, window.innerHeight);

var render = function () {
  requestAnimationFrame(render);
  DEMO.Update();
  stats.update();
};

render();