"use strict";

var THREE = _interopRequireWildcard(require("three"));

var _statsModule = _interopRequireDefault(require("three/examples/jsm/libs/stats.module.js"));

var _datGuiModule = require("three/examples/jsm/libs/dat.gui.module.js");

var _OrbitControls = require("three/examples/jsm/controls/OrbitControls.js");

var _jquery = _interopRequireDefault(require("jquery"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

window.$ = window.jQuery = _jquery.default;
var stats = new _statsModule.default();
document.body.appendChild(stats.dom);
var lastTime = new Date().getTime();
var controls = new function () {
  this.Speed = 0;
  this.SizeX = 1000;
  this.SizeY = 1000;
  this.DotSizeX = 1000;
  this.DotSizeY = 1000;
}();
var raycaster = new THREE.Raycaster();
var mouse = new THREE.Vector2(0, 0);
var interpoint = new THREE.Vector2(0, 0);
var interpoint2 = new THREE.Vector2(0, 0);

function onMouseMove(event) {
  // calculate mouse position in normalized device coordinates
  // (-1 to +1) for both components
  mouse.x = event.clientX / window.innerWidth * 2 - 1;
  mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
  interpoint2 = interpoint;
  interpoint2.x = interpoint.x / 1000 * 2 - 1;
  interpoint2.z = interpoint.z / 1000 * 2 + 1; //console.log(interpoint2);
}

var DEMO = {
  ms_Renderer: null,
  ms_Camera: null,
  ms_Scene: null,
  ms_Controls: null,
  raycaster: null,
  mouse: null,
  uniforms: null,
  Initialize: function () {
    this.ms_Renderer = new THREE.WebGLRenderer({
      //alpha: false,
      antialias: true //depth:true,
      //logarithmicDepthBuffer: false,
      //powerPreference: "high-performance",
      //precision:'highp',
      //premultipliedAlpha: true

    });
    this.ms_Renderer.setPixelRatio(window.devicePixelRatio);
    document.body.appendChild(this.ms_Renderer.domElement);
    this.ms_Scene = new THREE.Scene();
    this.ms_Scene.name = 'Viewer';
    this.ms_Camera = new THREE.PerspectiveCamera(55.0, window.innerWidth / window.innerHeight, 0.5, 300000);
    this.ms_Camera.position.set(4, 4, 4);
    this.ms_Camera.lookAt(0, 0, 0);
    this.ms_Scene.add(this.ms_Camera); // Initialize Orbit control

    this.ms_Controls = new _OrbitControls.OrbitControls(this.ms_Camera, this.ms_Renderer.domElement);
    this.ms_Controls.userPan = false;
    this.ms_Controls.userPanSpeed = 0.0;
    this.ms_Controls.minDistance = 0;
    this.ms_Controls.maxDistance = 2000.0;
    this.ms_Controls.minPolarAngle = 0;
    this.ms_Controls.maxPolarAngle = Math.PI * 0.495;
    var gsize = 512;
    var res = 1024;
    var gres = res / 2;
    var origx = -gsize / 2;
    var origz = -gsize / 2;
    var size = 0.75;
    var geometry2 = new THREE.BoxBufferGeometry(0.75, 0.75, 0.75); // geometry

    var width = 4; // width of plane in world units

    var height = 4; // height of plane in world units

    var size = 4; // texture block size in world units

    var w = width / size;
    var h = height / size;
    var geometry = new THREE.PlaneGeometry(width, height, 1, 1);
    var uvs = geometry.faceVertexUvs[0];
    uvs[0][0].set(0, h);
    uvs[0][1].set(0, 0);
    uvs[0][2].set(w, h);
    uvs[1][0].set(0, 0);
    uvs[1][1].set(w, 0);
    uvs[1][2].set(w, h);
    geometry.uvsNeedUpdate = true;
    this.uniforms = {
      u_resolution: {
        value: new THREE.Vector2(100, 100)
      },
      u_mouse: {
        value: new THREE.Vector2(interpoint.x, interpoint.z)
      },
      dotSize: {
        value: new THREE.Vector2(controls.DotSizeX, controls.DotSizeY)
      },
      u_time: {
        value: 0
      }
    };
    var material = new THREE.ShaderMaterial({
      vertexShader: ` 
            #ifdef GL_FRAGMENT_PRECISION_HIGH
            precision highp float;
            #else
            precision mediump float;
            #endif
            precision mediump int;
            
            varying vec2 vUv;

			void main()
			{
				vUv = uv;
				vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
				gl_Position = projectionMatrix * mvPosition;
			}
                    `,
      side: THREE.DoubleSide,
      uniforms: this.uniforms,
      fragmentShader: `
            #ifdef GL_ES
            precision mediump float;
            #endif
            
            

            uniform float u_time;

			varying vec2 vUv;

			void main( void ) {

				vec2 position = vUv;

				float color = 0.0;
				color += sin( position.x * cos( u_time / 15.0 ) * 80.0 ) + cos( position.y * cos( u_time / 15.0 ) * 10.0 );
				color += sin( position.y * sin( u_time / 10.0 ) * 40.0 ) + cos( position.x * sin( u_time / 25.0 ) * 40.0 );
				color += sin( position.x * sin( u_time / 5.0 ) * 10.0 ) + sin( position.y * sin( u_time / 35.0 ) * 80.0 );
				color *= sin( u_time / 10.0 ) * 0.5;

				gl_FragColor = vec4( vec3( color, color * 0.5, sin( color + u_time / 3.0 ) * 0.75 ), 1.0 );

			}
            `
    });
    var mesh = new THREE.Mesh(geometry2, material);
    var plane = new THREE.Mesh(geometry, material);
    plane.position.x = 0;
    plane.position.y = 0;
    this.ms_Scene.add(plane);
    mesh.position.x = 0;
    mesh.position.y = 0;
    this.ms_Scene.add(mesh);
    var gui = new _datGuiModule.GUI();
    gui.add(controls, 'Speed', 0, 0.25);
    gui.add(controls, 'SizeX', 1, 1000);
    gui.add(controls, 'SizeY', 1, 1000);
    gui.add(controls, 'DotSizeX', 1, 100000);
    gui.add(controls, 'DotSizeY', 1, 100000);
  },
  Display: function () {
    this.ms_Renderer.render(this.ms_Scene, this.ms_Camera);
  },
  Update: function () {
    var currentTime = new Date().getTime() * 0.001;
    var delta = lastTime - currentTime; //console.log(mouse);

    lastTime = currentTime;
    this.uniforms.u_resolution.value = new THREE.Vector2(controls.SizeX, controls.SizeY);
    this.uniforms.u_time.value += controls.Speed;
    this.uniforms.u_mouse.value = new THREE.Vector2(interpoint2.x, interpoint2.z);
    this.uniforms.dotSize.value = new THREE.Vector2(controls.DotSizeX, controls.DotSizeY);
    this.Display();
  },
  Resize: function (inWidth, inHeight) {
    this.ms_Camera.aspect = inWidth / inHeight;
    this.ms_Camera.updateProjectionMatrix();
    this.ms_Renderer.setSize(inWidth, inHeight);
    this.Display();
  }
};
DEMO.Initialize();
window.addEventListener('resize', function () {
  DEMO.Resize(window.innerWidth, window.innerHeight);
});
window.addEventListener('mousemove', onMouseMove, false);
DEMO.Resize(window.innerWidth, window.innerHeight);

var render = function () {
  DEMO.Update();
  raycaster.setFromCamera(mouse, DEMO.ms_Camera);
  var intersects = raycaster.intersectObjects(DEMO.ms_Scene.children);

  if (intersects != undefined && intersects != null) {
    if (intersects.length != 0) {
      interpoint = intersects[0].point; //console.log(interpoint.x);
    }
  }

  stats.update();
  requestAnimationFrame(render); //window.requestAnimationFrame(render);
};

render();